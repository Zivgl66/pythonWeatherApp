name: GitHub Actions CI/CD

on:
  pull_request:
    types:
      - closed
    branches:
      - master
      - dev

  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

        
      # Step to determine the current version
      - name: Read current version
        id: current_version
        run: |
          current_version=$(cat version.txt)
          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT

      # Step to determine version increment type
      - name: Determine version increment type
        id: determine_version_type
        run: |
          # Check if the pull request was merged
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            base_branch="${{ github.event.pull_request.base.ref }}"
            head_branch="${{ github.event.pull_request.head.ref }}"

            # Determine the type of version increment needed
            if [[ "$base_branch" == "master" && "$head_branch" =~ hotfix ]]; then
                echo "version_increment_type=patch" >> $GITHUB_OUTPUT
            elif [[ "$base_branch" == "master" && "$head_branch" == "dev" ]]; then
              echo "version_increment_type=minor" >> $GITHUB_OUTPUT
            elif [[ "$base_branch" == "master" ]]; then
              echo "version_increment_type=major" >> $GITHUB_OUTPUT
            else
              echo "version_increment_type=none" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Increment version
        id: new_version
        run: |
          current_version="${{ steps.current_version.outputs.current_version }}"
          IFS='.' read -ra ver <<< "$current_version"
          major=${ver[0]}
          minor=${ver[1]}
          patch=${ver[2]}
          version_increment_type="${{ steps.determine_version_type.outputs.version_increment_type }}"
          echo "version increment type is: $version_increment_type"

          if [[ "$version_increment_type" == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$version_increment_type" == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$version_increment_type" == "patch" ]]; then
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          if [[ "$new_version" != "" && "$new_version" != "$current_version" ]]; then
            echo "New version: $new_version"
            echo $new_version > version.txt
            echo "new_version=$new_version" >> $GITHUB_OUTPUT
          else
            echo "new_version=$new_version" >> $GITHUB_OUTPUT
          fi
          echo "new version is: ${{ steps.new_version.outputs.new_version }}"

      - name: Commit and push the new version file
        if: steps.new_version.outcome == 'success' # Ensure this step runs only if Increment version was successful
        run: |
          new_version="${{ steps.new_version.outputs.new_version }}"
          if [[ "$new_version" != "" && "$new_version" != "${{ steps.current_version.outputs.current_version }}" ]]; then
            git config --local user.name "GitHub Actions"
            git config --local user.email "actions@github.com"
            git add version.txt
            git commit -m "Bump version to $new_version"
            git push origin master
          else
            echo "new_version=${{ steps.current_version.outputs.current_version }}" >> $GITHUB_OUTPUT
          fi
          echo "new version is: ${{ steps.new_version.outputs.new_version }}"

          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}          

       - name: Build Docker image
         run: | 
           docker build -t ${{ secrets.DOCKERHUB_USER }}/weatherapp:latest .
           docker tag ${{ secrets.DOCKERHUB_USER }}/weatherapp:latest ${{ secrets.DOCKERHUB_USER }}/weatherapp:${{ github.sha }}

          
      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USER }}/weatherapp:latest
          docker push ${{ secrets.DOCKERHUB_USER }}/weatherapp:${{ github.sha }}
          
 update-k8s-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
              
      
    steps:
    # Checkout the Kubernetes manifest repository
    - name: Setup yq
      uses: vegardit/gha-setup-yq@v1
    
    - name: Checkout Kubernetes manifest repository
      uses: actions/checkout@v3
      with:
        repository: Zivgl66/k8s-weatherapp 
        token: ${{ secrets.GH_TOKEN }}
        path: k8s-manifests  

        
    # Update the Kubernetes deployment manifest
    - name: Update Kubernetes deployment manifest
      run: |
        # Replace the image tag in the Kubernetes deployment manifest
        # yq -i -y '.spec.template.spec.containers[0].image = "${{ secrets.DOCKERHUB_USER }}/weatherapp:${{ github.sha }}"' k8s-manifests/deployment.yaml
        yq eval '.spec.template.spec.containers[0].image = "${{ secrets.DOCKERHUB_USER }}/weatherapp:${{ github.sha }}"' -i k8s-manifests/deployment.yaml

    - name: Print deployment manifest after update
      run: cat k8s-manifests/deployment.yaml

    # Commit and push changes
    - name: Commit and push changes
      run: |
        cd k8s-manifests
        git config --local user.name "GitHub Actions"
        git config --local user.email "actions@github.com"
        git add deployment.yaml 
        git commit -m "Update deployment image to ${{ secrets.DOCKERHUB_USER }}/weatherapp:${{ github.sha }}"
        git push origin main
          
